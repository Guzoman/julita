#!/usr/bin/env python3
"""
Ejecutar fix de Supabase sin usar el editor SQL (evita error de snippets)
"""

import os
import requests
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Obtener credenciales
supabase_url = os.getenv('SUPABASE_URL')
supabase_key = os.getenv('SUPABASE_SERVICE_ROLE_KEY')

print("=== FIX SUPABASE ALTERNATIVO (Sin Editor SQL) ===")
print(f"URL: {supabase_url}")

if not supabase_url or not supabase_key:
    print("ERROR: Faltan credenciales")
    exit(1)

# Headers para peticiones
headers = {
    'apikey': supabase_key,
    'Authorization': f'Bearer {supabase_key}',
    'Content-Type': 'application/json',
    'Prefer': 'params=single-object'
}

# Función para ejecutar SQL usando el endpoint directo
def ejecutar_sql_directo(sql, descripcion):
    try:
        print(f"\n--- {descripcion} ---")
        print(f"SQL: {sql[:100]}...")

        # Endpoint para ejecutar SQL directamente
        response = requests.post(
            f"{supabase_url}/rest/v1/",
            headers=headers,
            json=sql,
            timeout=30
        )

        print(f"Status: {response.status_code}")

        if response.status_code == 200 or response.status_code == 201:
            print("OK: Ejecutado correctamente")
            return True, response.json() if response.text else None
        else:
            print(f"ERROR: {response.text}")
            return False, response.text

    except Exception as e:
        print(f"ERROR de conexion: {e}")
        return False, str(e)

print("\n1. AGREGANDO CAMPOS FALTANTES A PRODUCTOS...")

# Comandos SQL principales
comandos = [
    {
        'sql': "ALTER TABLE productos ADD COLUMN IF NOT EXISTS cod_cole INTEGER",
        'desc': 'Agregar campo cod_cole'
    },
    {
        'sql': "ALTER TABLE productos ADD COLUMN IF NOT EXISTS articulo INTEGER",
        'desc': 'Agregar campo articulo'
    }
]

# Ejecutar comandos de ALTER TABLE
exitosos = 0
for cmd in comandos:
    success, result = ejecutar_sql_directo(cmd['sql'], cmd['desc'])
    if success:
        exitosos += 1

print(f"\nComandos ALTER TABLE ejecutados: {exitosos}/{len(comandos)}")

print("\n2. CREANDO TABLA articulos...")

# Crear tabla articulos
sql_crear_articulos = """
CREATE TABLE IF NOT EXISTS articulos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    articulo INTEGER NOT NULL UNIQUE,
    descripcion VARCHAR(500) NOT NULL,
    categoria VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
)
"""

success, result = ejecutar_sql_directo(sql_crear_articulos, "Crear tabla articulos")

print("\n3. INSERTANDO ARTICULOS DE EJEMPLO...")

# Insertar artículos
sql_insert_articulos = """
INSERT INTO articulos (articulo, descripcion, categoria) VALUES
(1000, 'Polera Basica', 'POLERAS'),
(2000, 'Pantalon Escolar', 'PANTALONES'),
(3000, 'Chaqueta', 'CHAQUETAS'),
(4000, 'Falda Escolar', 'FALDAS'),
(5000, 'Buso', 'BUSOS')
ON CONFLICT (articulo) DO UPDATE SET descripcion = EXCLUDED.descripcion
"""

success, result = ejecutar_sql_directo(sql_insert_articulos, "Insertar articulos")

print("\n4. VERIFICANDO ESTRUCTURA ACTUAL...")

# Verificar estructura actual
try:
    response = requests.get(
        f"{supabase_url}/rest/v1/productos?select=*",
        headers=headers,
        timeout=10
    )

    if response.status_code == 200:
        productos = response.json()
        print("\nESTRUCTURA ACTUAL DE PRODUCTOS:")
        if productos:
            campos = list(productos[0].keys())
            print(f"Campos: {campos}")

            print("\nVERIFICANDO CAMPOS CRITICOS:")
            tiene_cod_cole = 'cod_cole' in campos
            tiene_articulo = 'articulo' in campos

            print(f"- Tiene cod_cole: {'SI' if tiene_cod_cole else 'NO'}")
            print(f"- Tiene articulo: {'SI' if tiene_articulo else 'NO'}")

            if tiene_cod_cole and tiene_articulo:
                print("\n¡EXITO! La estructura ahora es correcta")

                # Mostrar algunos ejemplos
                print("\nEJEMPLOS DE PRODUCTOS:")
                for i, p in enumerate(productos[:3], 1):
                    print(f"Producto {i}:")
                    print(f"  ID: {p.get('id')}")
                    print(f"  Codigo: {p.get('codigo')}")
                    print(f"  Descripcion: {p.get('descripcion')}")
                    print(f"  Precio: {p.get('precio_venta')}")
                    print(f"  cod_cole: {p.get('cod_cole', 'NO ASIGNADO')}")
                    print(f"  articulo: {p.get('articulo', 'NO ASIGNADO')}")
                    print()
            else:
                print("\nADVERTENCIA: Aun faltan campos criticos")
        else:
            print("No hay productos en la tabla")
    else:
        print(f"Error verificando productos: {response.text}")

except Exception as e:
    print(f"Error en verificacion: {e}")

print("\n=== RESUMEN FINAL ===")
print("El fix ha sido ejecutado.")
print("Si los campos se agregaron correctamente, tu Supabase ahora entiende:")
print("- La relacion entre productos y colegios (cod_cole)")
print("- La agrupacion por tipos de uniformes (articulo)")
print("- La estructura necesaria para la logica VB6")